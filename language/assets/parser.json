{
    "$cacheMember": "This is needed to fetch a Member which is not cached like ;$cacheMember[userid]",
    "$setServerVar": "Sets server's variable value ;$setServerVar[variable;value]",
    "$serverCount": "returns the amount of you server your bot is in",
    "$ram": "returns memory Usage in MB",
    "$findChannel": "Finds a channel in this server. If last field is set to no, and the function couldn't find any channel, it'll return undefined.;$findChannel[ID/mention/name;returnCurrentChannel (yes/no) (optional)]",
    "$ping": "Returns the Bot websocket ping",
    "$getUserBadges": "Returns the user's badges\nNitro Classic and Nitro Boosting badges are not 100% guaranteed to be retrieved.;$getUserBadges or $getUserBadges[userID]",
    "$ban": "Bans an user from the server by using their ID.;$ban[userID;reason;messages to delete (days)]",
    "$disableMentions": "Replaces all the user mentions with their user names",
    "$authorID": "Returns the author's ID.",
    "$serverBoostCount": "Returns the amount of boosts this server has",
    "$cooldown": "Sets a server user cooldown;$cooldown[time (default 5s);error message;user id (optional)]",
    "$truncate": "Truncates the number to 0 decimals.;$truncate[number]",
    "$parseDate": "Parses given ms to date or time;$parseDate[ms;date/time]",
    "$customEmoji": "Returns a custom emoji;$customEmoji[name or id]",
    "$createChannel": "Creates a channel with given type and name. If 3rd field is set to 'yes', the function will return the newly created channel ID. If categoryID field is present, the channel will be created under the category with given ID;$createChannel[name;type;return ID (yes/no);categoryID (optional);topic;nfsw (yes/no);bitrate (i.e 64000);position;Slowdown duration;User limit for voice channels]\n\nChannel Types:\ntext, voice, category, news, store, stage",
    "$deleteChannels": "Delete a channel or channels by using their IDs.;$deleteChannels[channelID;channelID;...]",
    "$dateStamp": "Returns the current date since 1970 in ms (UTC).;$timeStamp[Return in Seconds (Yes/No, Default is No)]\n\nExample 1:\n$timestamp\n\nOutput:\n1680490461874\n\nExample 2\n$timestamp[yes]\n\nOutput:\n1680490464",
    "$timeStamp": "Returns the current date since 1970 in ms (UTC).;$timeStamp[Return in Seconds (Yes/No, Default is No)]\n\nExample 1:\n$timestamp\n\nOutput:\n1680490461874\n\nExample 2\n$timestamp[yes]\n\nOutput:\n1680490464",
    "$thumbnail": "Sets a thumbnail to the embed;$thumbnail[url]",
    "$systemChannelID": "Returns the system channel ID of this server (if any);$systemChannelID",
    "$serverVerificationLevel": "Returns the server verification level of this guild",
    "$mention": "Returns the mention of the user;$mention[User ID (optional, default $authorID)]",
    "$round": "Rounds the number to the unit;$round[number]",
    "$roleName": "Returns a Role name using their ID;$roleName[roleID]",
    "$roleCount": "Returns the amount of roles in this guild",
    "$channelCount": "Returns the amount of channels in this guild;$channelCount or $channelCount[type]",
    "$channelSendMessage": "Sends a message to given channel ID\nIf last field is set to yes, it'll return the newly sent message ID;$channelSendMessage[channelID;message;return message ID (yes/no) (optional)]",
    "$kick": "Kicks an user from the server by using their ID;$kick[userID;reason (optional)]",
    "$serverCooldown": "Sets a Server cooldown;$serverCooldown[time (default 5s);error message]",
    "$hasPerms": "Check if given user ID has the provided perms;$hasPerms[userID;perm1;perm2;...]",
    "$mentionedRoles": "Returns the roles that were mentioned by the user;$mentionedRoles[mention number]",
    "$joinSplitText": "Joins the $textSplit indexes by <separator>;$joinSplitText[separator]||$joinSplitText[ | ]\n\nExample:\n$textSplit[Hello/World;/]\n$joinSplitText[, ]\n\nOutput:\nHello, World",
    "$isNumber": "Checks if given input is a number or not;$isNumber[value]",
    "$textSplit": "Splits a text by <separator>, and store it in array name\n\ndefault array name is `default`;$textSplit[text;separator;array name (optional)]\n\nExample:\n$textSplit[Mido/Rake/Azz;/]\n1 is $arrayGet[1]\n2 is $arrayGet[2]\n3 is $arrayGet[3]\n\nOutput:\n1 is Mido\n2 is Rake\n3 is Azz",
    "$serverIcon": "Returns the Server Icon;$serverIcon or $serverIcon[size (optional);dynamic (yes/no)(optional)]",
    "$giveRoles": "Gives a role or roles to given user ID;$giveRoles[userID;roleID;roleID;...]",
    "$findMember": "Finds a member in this guild, returns the user ID, or author ID if last field is set to 'yes' (defaults to yes), or else it'll return undefined.;$findMember[nickname/ID/mention/username/username#dicriminator;returnCurrentUser (yes/no) (optional)]",
    "$addEmoji": "Adds an emoji to this guild. If role IDs are given, the emoji will only be usable by users with one of provided role IDs;$addEmoji[url;name;returnEmoji (yes/no)(optional);roleID1;roleID2;...]",
    "$splitText": "Gets a value from $textSplit;$splitText[index]",
    "$botCount": "Returns the amount of bots in this server",
    "$onlyForIDs": "Only given user IDs will be able to execute this command;$onlyForIDs[userID;userID;...;error message]",
    "$noEscapingMessage": "Special characters won't be replaced;$noEscapingMessage or $noEscapingMessage[arg number]",
    "$message": "Returns the user's \nIf this function is called on a slash command, it will contain the value of either given option index or all the option values;$message or $message[arg number]",
    "$channelNSFW": "Returns whether the channel is nsfw or not;$channelNSFW or $channelNSFW[channelID]",
    "$takeRoles": "Takes a role or roles from given user ID;$takeRoles[userID;roleID;roleID;...]",
    "$membersCount": "Returns the amount of users in this server\nIf without bots specified, it will detect only the cached bots;$membersCount[with bots (yes/no, default is yes)",
    "$channelName": "Returns the Channel Name;$channelName or $channelName[channelID]",
    "$userID": "Returns an user ID with given user name;$userID[username]",
    "$addTimestamp": "Sets a timestamp to the embed;$addTimestamp or $addTimestamp[ms]",
    "$username": "Returns the user's username;$username of $username[userID]",
    "$clear[": "Clears an amount of messages from given channel ID and from specfic person or everyone ;$clear[amount;userid or everyone(optional);channelID (optional)]\nExample:\n$clear[10;$authorID]\nwill delete 10 message from the author\nExample2:\nExample:\n$clear[10;everyone]\nwill delete 10 message from every user\n",
    "$sendMessage": "Sends a message to this channel;$sendMessage[message;return message ID (yes/no)(optional)]",
    "$description": "Sets an embed description;$description[text]",
    "$userAvatar": "Returns the user's avatar;$userAvatar or $userAvatar[userID;size (optional);dynamic (optional);return server avatar (default is no)]",
    "$image": "Sets an image to the embed;$image[url]",
    "$guildRoles": "Returns all the roles of this guild;$guildRoles $guildRoles[id/name/mention;amount to return]",
    "$title": "Sets an embed title;$title[text;url (optional)]",
    "$sum": "Sum up the given args;$sum[1;3;...]",
    "$editMessage": "Edits a message with given message ID;$editMessage[messageID;new message;channelID (optional)]",
    "$wait": "Stops the code execution for given time;$wait[time]",
    "$roleID": "returns the role ID of given role name;$roleID[role name]",
    "$commandCode": "Returns the command code",
    "$sub": "Subtracts a number;$sub[1;2;...]",
    "$numberSeparator": "Separates a number in thousands;$numberSeparator[number;separator (optional)]\n\nExample:\nYour number is $numberSeparator[1531]\n\nOutput:\nYour number is 1,531",
    "$hasRoles": "Checks if given user ID has the provided roles;$hasRoles[userID;roleID;roleID;...]",
    "$channelType": "Returns the channel type;$channelType or $channelType[channelID]",
    "$allMembersCount": "Returns the total user count of the bot",
    "$serverContentFilter": "Returns the content filter level of this guild",
    "$roleExists": "Checks if given role ID exists;$roleExists[roleID]",
    "$channelExists": "Checks if given channel ID exists;$channelExists[channelID]",
    "$random[": "Returns a random number from X-Y;$random[min;max;allow decimals (yes/no)]",
    "$userExists": "Checks if the given user ID exists;$userExists[userID]",
    "$multi": "Multiplicates X by Y;$multi[1;4;...]",
    "$unban": "Unbans a user from the server by using their ID or username;$unban[userID/username;reason (optional)]",
    "$randomText": "Returns a random text from given texts;$randomText[some;random;text;...]",
    "$userLeaderboard": "generate a leaderboard of a user variable and return it;$userLeaderboard[variable;asc/desc (optional);{rank}.- {username} - {value};list (optional, max=40);page (optional)]\n\nAvailable Variables:- \ntop/rank > rank number\nid > user id \nmention\nusername > like Mido \nnickname > user nickname\ntag > like Mido#1234\ndiscriminator > like 1234\nvalue > number value\nraw_value > same as value but raw and wont be converted",
    "$noMentionMessage": "User's message without mentions;$noMentionMessage or $noMentionMessage[arg number]",
    "$replaceText": "Replaces A to X in TEXT;$replaceText[some text;sample;new]",
    "$divide": "Divides a number by X;$divide[5;2]",
    "$getUserVar": "Gets an user variable value;$getUserVar[variable;userID (optional)]",
    "$color[": "Sets a embed color;$color[hex or number]",
    "$viewUserVars": "View a list of all the variables that are defined for a specific user;$viewUserVars[User ID;Separator]\n\nExample:\n$viewUsersVars[$authorID]\n\nOutput:\nxp, money, bonus",
    "$viewServerVars": "View a list of all the variables that are defined for the server, and search for specific variables using a regular expression query filter;$viewServerVars[Separator;Query Regex (optional)]\n\nExample:\n$viewServerVars\n\nOutput:\nlevel1_xp, names, staffs, level2_xp, level3_xp, level1_reward\n\nExample (return only variables that starts with level):\n$viewServerVars[ ,;^level]\n\nOutput:\nlevel1_xp, level2_xp, level3_xp,level1_reward",
    "$addField": "Adds a field to the embed;$addField[name;value;inline (yes/no)(optional)]",
    "$changeNickname": "Changes the nickname of given user ID;$changeNickname[userID;nickname]",
    "$setUserVar": "Sets a user variable value;$setUserVar[variable;value;userID (optional)]",
    "$addCmdReactions": "Adds reactions to the user's message;$addCmdReactions[😀;😎]",
    "$discriminator": "Returns the user's discriminator;$discriminator or $discriminator[userID]",
    "$awaitMessage": "Awaits a message from given user ID or everyone in this channel, and return it;$awaitMessage[MESSAGE (Optional);userid / everyone (optional, default everyone);timeout after (default and max:(60 x bot tier) seconds); return message id instead of content (yes/no)]\nreturn the user reply or undefined\n\nExample:\nYour answer is: $awaitMessage[Are you tall?;$authorID]\n\nOutput (after answering with `YES`):\nYour answer is: YES",
    "$getServerVar": "Gets a server variable value;$getServerVar[variable]",
    "$mentioned[": "Returns the ID of the mentioned user;$mentioned[mention number;return author ID (yes/no)(optional)]",
    "$addReactions": "adds reactions to the bot's response;$addReactions[😀;😎]",
    "$nickname": "returns the nickname of the user in this guild (if any);$nickname or $nickname[userID]",
    "$footer": "sets an embed footer;$footer[text;url]",
    "$editIn": "edits the bot's message after given time;$editIn[time;new message]\n\nExample:\nRolling the dice...\n$editIn[3s;You got $random[1;6]]",
    "$useChannel": "command will be sent to given channel ID;$useChannel[channelID]",
    "$isBoosting": "checks if the user is boosting this server;$isBoosting or $isBoosting[userID]",
    "$mentionedChannels": "returns the mentioned channel ID;$mentionedChannels[mention number;return current channel ID (yes/no)(optional)]",
    "$author": "sets an embed author, third determines whether the author should contain a hyperlink.;$author[text;url;link]",
    "$toLocaleUppercase": "capitalizes the first letter of all the given words;$toLocaleUpperCase[some words here]",
    "$onlyIf[": "checks if a condition is true;$onlyIf[value(!=/==/>=/<=/>/<)value2;error message]",
    "$toUppercase": "makes all the letters uppercase;$toUpperCase[text]",
    "$toLowercase": "makes all the letters lowercase;$toLowerCase[text]",
    "$channelID": "returns the channel ID of this channel;$channelID or $channelID[channel name]",
    "$userTag": "returns the user name and discriminator;$userTag or $userTag[userID]",
    "$jsonRequest": "makes a json request (GET method) and returns a property from it;$jsonRequest[url;property;error message;headerName:headerValue;headerName:headerValue;...]",
    "$ownerID": "returns the server owner id;$ownerID",
    "$serverFeatures": "returns the guild's features;$serverFeatures",
    "$highestRole": "returns the user's highest role in this guild;$highestRole or $highestRole[userID]",
    "$randomString": "generates a random string;$randomString[length]",
    "$getServerInvite": "creates an invite link to this server;$getServerInvite\n\nExample:\nMy server invite is: $getServerInvite\n\nOutput:\nMy server invite is: https://discord.gg/midoworkshopsv",
    "$getChannelVar": "gets a channel variable value;$getChannelVar[variable;channelID (optional)]",
    "$setChannelVar": "sets a channel variable value;$setChannelVar[variable;value;channelID (optional)]",
    "$checkContains": "checks if given message contains any of the texts;$checkContains[message;text1;text2;...]\n\nExample 1:\n$checkContains[Mido is good;good]\n\nOutput:\ntrue\n\nExample 2:\n$checkContains[Mido is good;bad]\n\nOutput:\nfalse",
    "$deleteRoles": "deletes a role or roles;$deleteRoles[roleID;roleID;...]",
    "$rolePosition": "returns the role position of this role;$rolePosition[roleID]",
    "$deletecommand": "deletes the user's message",
    "$attachment": "adds an attachment.\nIf name field is given, you must specify the extension for the attachment (png, webp, or gif);$attachment[data;name (optional);type (url or buffer) (optional);spoiler (yes/no, default is no) (optional)]",
    "$isValidInvite": "checks if an invite url is valid;$isValidInvite[invite code]",
    "$isBot": "Returns if the user is a bot or not.;$isBot or $isBot[userID]",
    "$emojiName": "Returns the emoji name the user reacted with",
    "$getTextSplitLength": "gets the length of the $textSplit",
    "$createRole": "creates a role in this guild;$createRole[name;color (optional);mentionable (optional);hoisted (optional);position (optional);permission;permission;...;return role id (yes/no, default no, optional)]",
    "$serverName": "Returns the Current Server Name;$serverName",
    "$onlyPerms": "checks if the author has the provided permissions.;$onlyPerms[perm1;perm2;...;error message]",
    "$checkCondition": "Checks if given expression is true or false.;$checkCondition[Expression]\n\nExample:\n$checkCondition[$username==Mido]\n\nOutput:\ntrue\n\nExample:\n$checkCondition[10<5]\n\nOutput:\nfalse",
    "$clientID": "Returns the Bot ID",
    "$blackListRoleIDs": "Blacklist roles from using this command by using their IDs.;$blackListRoleIDs[roleID;roleID;...;error message]",
    "$blackListIDs": "Blacklist users from using this command by using their IDs.;$blackListIDs[userID;userID;...;error message]\n\nExample (blacklisted user):\n$blackListIDs[788361834360864808;You are blacklisted from using this command!]\nHello there!\n\nOutput:\nYou are blacklisted from using this command!\n\nExample (unblacklisted user):\n$blackListIDs[788361834360864808;You are blacklisted from using this command!]\nHello there!\n\nOutput:\nHello there!",
    "$emojiID": "Returns the emoji ID of the emoji the user reacted with",
    "$editTextSplitElement": "Edits the value from given index.;$editTextSplitElement[index;new value]",
    "$removeTextSplitElement": "Removes an element from $textSplit by using its index.;$removeTextSplitElement[index]",
    "$findTextSplitIndex": "Finds the index of a splitted value in $textSplit;$findTextSplitIndex[value]",
    "$emojiToString": "Returns the emoji the user reacted with",
    "$authorAvatar": "Returns the author's avatar.;$authorAvatar[return server avatar (default is no)]\n\nExample (Show User Avatar):\n$authorAvatar\n\nExample (Show Server Avatar):\n$authorAvatar[yes]",
    "$creationDate": "Returns the creation date of given channel, guild, emoji, user or role ID.\nDate Accept [this format](https://discord.com/channels/772051119538176021/949797746917933126/952064529876021358);$creationDate[emojiID/userID/roleID/channelID/guildID;date/time/ms (optional);Date format]",
    "$userRoles": "Returns the user roles.;$userRoles or $userRoles[userID;ids/mentions/names (optional);separator (optional)]",
    "$status": "Returns the user's presence status. (Presence intent needs to be enabled on Discord Dev Portal);$status or $status[userID]",
    "$charCount": "Counts character of a text, or the user's message.;$charCount or $charCount[text]",
    "$textLength": "Counts character of a text, or the user's message.;$textLength or $textLength[text]\n\nExample:\n$textLength[Mido]\n\nOutput:\n4\n\nExample:\n$textLength[Hello]\n\nOutput:\n6",
    "$getMessageVar": "Gets a message variable value;$getMessageVar[variable;messageID (optional)]",
    "$memberJoinedDate": "Returns the date the user joined this server;$memberJoinedDate or $memberJoinedDate[userID;date/time/ms (optional)]",
    "$argsCheck": "Checks for user arguments.;$argsCheck[(>/</none)number;error message]",
    "$setMessageVar": "Sets a message variable value;$setMessageVar[variable;value;messageID (optional)]",
    "$suppressErrors": "Suppress all the errors and sends a custom one. {error} will contain the error that was thrown.;$suppressErrors or $suppressErrors[message]",
    "$filterMessage": "Removes letters or numbers from given text;$filterMessage[message;letterOrSymbols]\n\nExample:\n$filterMessage[Hello World;lo]\n\nOutput:\nHe Wrd",
    "$onlyNSFW": "Makes this command only executable in nsfw channels.;$onlyNSFW[error message]",
    "$getRoleColor": "Gets the color of given role ID;$getRoleColor[roleID]",
    "$getBotInvite": "Returns the bot's invite.;$getBotInvite[permission;permission;permission...]\n\nExample:\n$getBotInvite[admin]\n\nOutput:\nhttps://discord.com/oauth2/authorize?client_id=725721249652670555&scope=bot+applications.commands&permissions=8",
    "$getEmbed": "Gets information of an embed;$getEmbed[Channel ID (optional);Message ID (optional);Info (optional, default is description);Embed Number (optional, default is 1)]\n\nExample:\n$getEmbed[$channelID;$messageID;description]\n\nOutput:\nThis was an embed description",
    "$messageAttachment": "Returns the first attachment url of this message. (if any)",
    "$onlyBotPerms": "Checks for bot permissions in this guild;$onlyBotPerms[perm1;perm2;...;error message]",
    "$cloneChannel": "Clones a channel with permissions.;$cloneChannel[Channel ID;New Name (optional);Category (optional);Return ID (yes/no, optional)]\n\nExample:\n$cloneChannel[General;Genera-Cloned]\n\nExample (Clone to category):\n$cloneChannel[General;General-Cloned;Category1]",
    "$setGuildName": "Sets a new Name for this guild.;$setGuildName[name]",
    "$setGuildIcon": "Sets a new Icon for this guild.;$setGuildIcon[url]",
    "$deleteIn": "Deletes the bot's response after given time;$deleteIn[time]",
    "$userPerms": "Returns the user's key permissions.;$userPerms or $userPerms[userID;separator (optional)]",
    "$rolePerms": "Returns the role key permissions.;$rolePerms[roleID;separator (optional)]",
    "$onlyForRoles": "The command will be only executed if the user has any of these role IDs / Names.;$onlyForRoles[roleID/Name;roleID/Name;...;error message]",
    "$botTyping": "Shows that the bot is currently typing for few seconds in the channel;$botTyping",
    "$uptime": "Uptime of the bot",
    "$hasRole": "Checks if the user has the given role.;$hasRole[userID;roleID]",
    "$channelUsed": "Returns the channelUsed if no argument provided\nSet channel Used if provided (Only for new interperter);$channelUsed or $channelUsed[CHANNEL ID]",
    "$findServerChannel": "Returns a channel ID in this server, or the channel ID this command was ran in only if last field is set to 'yes' (defaults to yes), or else it'll return undefined.;$findServerChannel[name/mention/id;returnCurrentChannel (yes/no) (optional)]",
    "$messageSlice": "Slices this message from X to Y (or just X).;$messageSlice[from;to (optional)]",
    "$usersWithRole": "Returns a list of users with given role (members are given from the cache.);$usersWithRole[roleID;separator (optional, default new line);id/username/tag/mention (optional, default tag)]\n\nExample (Get users with member roles):\n$usersWithRole[Members;, ;username]\n\nOutput:\nMido, Rake, Azz\n\nExample (Get users with no role):\nusers with no roles: $usersWithRole[;, ;tag]\n\nOutput:\nLonelyWolf#1234, Stranger#5678",
    "$resetUserVar": "Resets user variables values ;$resetUserVar[variable]",
    "$repeatMessage": "Repeats a message for X times.;$repeatMessage[times;message]",
    "$randomUserID": "Returns a random user ID from this server.",
    "$addObjectProperty": "Adds a key with a value to the existing object.;$addObjectProperty[key;value]",
    "$createObject": "Creates an object that can be used later.;$createObject[object string]\n\nExample:\n$createObject[{\"name\":\"Mido\",\"age\":110}]\nYour name is $objectGet[name]\nYour age is $objectGet[age]\n\nOutput:\nYour name is Mido\nYour age is 110",
    "$getObjectProperty": "Gets a property value from given key.;$getObjectProperty[key]",
    "$randomChannelID": "Returns a random text channel ID.",
    "$randomMention": "Mentions a random user of this server.",
    "$roundTenth": "Rounds a number to given unit.;$roundTenth[number;round]",
    "$getMessage[": "Gets information of given message ID.;$getMessage[channelID;messageID;userID/content/description]",
    "$colorRole": "Changes the color of given role ID.;$colorRole[roleID;hex or int color]",
    "$isValidObject": "Checks if given string is a valid object.;$isValidObject[string {}]",
    "$onlyIfMessageContains": "Checks if 'text' contains all the provided words.;$onlyIfMessageContains[text;word1;word2;...;error message]",
    "$removeSplitTextElement": "Removes an element or elements from $textSplit by using their indexes.;$removeSplitTextElement[index;index2;...]",
    "$usersInChannel": "Returns the users that are connected to this voice channel.;$usersInChannel[channelID;id/mention/username/count (optional);separator (optional)]",
    "$slowmode": "Sets a channel slowmode (or removes it by using 0).;$slowmode[channelID;time]",
    "$usersBanned": "Returns a list of users that are banned from this guild.;$usersBanned or $usersBanned[id/mention/username;separator (optional)]\n\nExample:\n$usersBanned[username;, ]\n\nOutput:\nMido, Rake, Azz",
    "$isBanned": "Checks whether given user ID is banned from a guild.;$isBanned[userID]",
    "$modifyChannelPerms": "Modifies the permissions of a channel for given user or role ID.;$modifyChannelPerms[channelID;+perm1;-perm2;/perm3;+perm4;...;roleID/userID]",
    "$deleteEmojis": "Delete a custom emoji(s) from the server.;$deleteEmojis[emoji1;emoji2;...]",
    "$serverEmojis": "Returns the emojis of this guild.",
    "$emojiCount": "Returns the amount of emojis in this server",
    "$randomRoleID": "Returns a random role ID from this guild.",
    "$findRole": "Returns a role ID if the query matches an option.;$findRole[id/name/mention]",
    "$isMuted": "Checks if the user is self-muted.;$isMuted[userID]",
    "$argsCount": "Returns the amount of user arguments.",
    "$messageExists": "Checks if a message exists by using its ID;$messageExists[channelID;messageID]",
    "$hasEmbeds": "Checks if given message ID contains an embed. returns true or false;$hasEmbeds[channelID;messageID]",
    "$clearReaction[": "Removes a reaction from given user ID.;$clearReaction[channelID;messageID;userID;emoji]",
    "$clearReactions": "Clears all the user reactions assigned to one emoji or all the reactions of this message.;$clearReactions[channelID;messageID;all/emoji]",
    "$getReactions": "Returns a list of users that reacted to this reaction.;$getReactions[channelID;messageID;emoji;mention/username/id]",
    "$onlyForCategories": "The command will only be executable in channels under one of these category IDs.;$onlyForCategories[categoryID;categoryID2;...;error message]",
    "$onlyForChannels": "The command will only be executable in the provided channel IDs.;$onlyForChannels[channelID;channelID2;...;error message]",
    "$serverRegion": "Return the Guild region",
    "$messageType": "Returns the type of this message.",
    "$modulo": "Returns the remainder of a division.;$modulo[5;2]",
    "$cpu": "Returns the cpu usage.",
    "$maxRam": "Total memory for this process.",
    "$channelTopic": "Returns the channel topic.;$channelTopic or $channelTopic[channelID]",
    "$serverBanner": "Returns the Server Banner.;$serverBanner",
    "$serverBoostLevel": "Return the Level of Server Count:$serverBoostLevel",
    "$newTicket": "Creates a ticket with given options;$newTicket[ticket name;ticket message;categoryID;return ticket ID;error message]",
    "$closeTicket": "Closes a ticket with given options;$closeTicket[error message (optional)]",
    "$isMentioned": "Checks if the role or channel or user was mentioned / everyone;$isMentioned[userID/roleID/channelID/everyone]",
    "$createWebhook": "Creates a webhook for this channel, bot has to have manage webhooks permission;$createWebhook[channelID;name;avatar;returnWebhookID&Token (yes/no);separator]",
    "$sendWebhook": "Sends a message through a webhook by using its ID and token;$sendWebhook[webhookID;webhookToken;message;return message id (yes/no) optional;username (optional);avatar (optional);thread (optional)]",
    "$referenceChannelID": "The ID of the channel where this user replied in",
    "$referenceMessageID": "The ID of the message that the user replied to",
    "$setChannelTopic": "Sets the topic of a channel with given ID;$setChannelTopic[channelID;topic]\n\nExample:\n$setChannelTopic[$channelID;This channel will be used for memes!]",
    "$deleteWebhook": "Deletes a webhook by using its token and ID;$deleteWebhook[webhookID;webhookToken]",
    "$pinMessage": "Pins the user's message or other message using its channel id and message id;$pinMessage or $pinMessage[channelID;messageID]",
    "$unpinMessage": "Unpins the user's message or other message by using its message and channel id;$unpinMessage or $unpinMessage[channelID;messageID]\n\nExample:\n$unpinMessage[$channelID;$messageID]",
    "$getInviteInfo": "Gets invite info from given invite code;$getInviteInfo[code/url;Property]\n\nPossible Properties:\nmaxUses, uses, channelID, guildID,serverid, servername, servericon, serversplash, serverdesc, memberscount, userID, isTemporary, expiresAt, createdAt,url\nExample:\n$getInviteInfo[ZFQNZA4Ekz;servername]\n\nOutput:\nCustom Command",
    "$channelCategoryID": "Returns the ID of the category this channel belongs to;$channelCategoryID or $channelCategoryID[channelID]",
    "$isUserDMEnabled": "Checks if the user has DMs open, returns true or false;$isUserDMEnabled or $isUserDMEnabled[userID]",
    "$addMessageReactions": "Add reactions to a message by using its channel and message ID;$addMessageReactions[channelID;messageID;reaction1;reaction2;...]",
    "$advancedTextSplit": "First field is the message we want to split and get indexes from\nsecond field would be the split used in the text and the next field would get the value of the index, setting this index value as the new text.\nNext fields work as splitter and new index.;$advancedTextSplit[text;split;index;split;index;...]||//in this example we will use a discord message link, we will get the message ID from this link.\n  The message ID is $advancedTextSplit[https://discord.com/channels/773352845738115102/773357374328012840/793564340513931285;//;2;/;5]!",
    "$isMentionable": "Checks whether the role is mentionable or not;$isMentionable[roleID]",
    "$isHoisted": "Checks if the role is hoisted above all the other roles;$isHoisted[roleID]",
    "$isManaged": "Checks if this role is managed by discord or not;$isManaged[roleID]",
    "$isValidHex": "Checks if given hex code or int is valid;$isValidHex[int or hex]",
    "$webhookExists": "Checks if a webhook exists by using its ID and token;$webhookExists[webhookID;webhookToken]",
    "$modifyWebhook": "Modifies a webhook by using its token and ID;$modifyWebhook[webhookID;webhookToken;name;avatar (optional)]",
    "$isValidLink": "Checks if given link is valid or not (might not be accurate);$isValidLink[link or url]",
    "$isDeafened": "Checks if the user is self-deafened.;$isDeafened[userID",
    "$serverSplash": "Returns Server Invite Splash;$serverSplash[size (optional)]",
    "$sendCrosspostingMessage": "Sends a message to multiple channels;$sendCrosspostingMessage[message;channel 1;channel 2;...]\n\nExample (Sending a message to #General, #Off-Topics):\n$sendCrosspostingMessage[Hello World!;General;Off-Topics]",
    "$botPing": "Returns the Bot Message ping",
    "$messageID": "Returns the user's message ID ",
    "$error": "Returns the error the interpreter threw;$error",
    "$executionTime": "Returns the time the interpreter took to execute every function in the code (in milliseconds)\nThis function won't work in embeds",
    "$if": "checks the expression and executes code inside it if true\nyou can use $elseIf to check other conditions if previous one is false\nyou can use $else to execute code block if nothing is true;$if[EXPRESSION]\nCODE... (execute if expression is true)\n$endIf\n\nExample:\n$if[$username==Mido]\nOh, you are MIDO!\n$endIf\n\nwith elseif and else:\n$if[EXPRESSION1]\nCODE 1 (execute if expression1 is true)\n$elseIf[EXPRESSION2]\nCODE 2 (execute if expression2 is true and expression1 is false)\n$endelseif\n$elseIf[EXPRESSION3]\nCODE 3 (execute if expression3 is true and expression1 and expression2 is false)\n$endelseif\n$else\nCODE 3 (execute if every previous expression is false)\n$endif",
    "$elseif": "will be checked if $if was false, should be ended with $endelseif;$elseIf[EXPRESSION]\nCODE BLOCK\n$endelseif",
    "$endelseif": "is used to close $elseIf;$elseIf[EXPR]\nCODE BLOCK\n$endelseif",
    "$else": "is used in case $if and $elseIf is not true;$if[1==2]\nCODE BLOCk\n$elseIf[3==4]\nANOTHER CODE BLOCK\n$endelseif\n$else\nELSE CODE BLOCK\n$endIf",
    "$endIf": "is used to end the whole $if block;$if[EXPRESSION]\nCODE BLOCK\n$endIf",
    "$replaceTextWithRegex": "Uses a regular expression to replace matching queries;$replaceTextWithRegex[text;regex;flags;new text]",
    "$regexReplace": "Uses a regular expression to replace matching queries;$regexReplace[text;regex;flags;new text]\n\nExample 1:\n$regexReplace[My age is 900 years old.;d+;g;[SECRET AGE]]\n\nOutput 1:\nMy age is [SECRET AGE] years old.",
    "$getObject": "Returns a JSON of created/modified $createObject;$getObject or $getObject[spaces]",
    "$findNumbers": "Takes every number from given string and returns them alone;$findNumbers[string]",
    "$findSpecialChars": "Takes all the non number/letter from given string and returns the alone;$findSpecialChars[string]",
    "$findChars": "Takes all the letters from given string and returns them alone;$findChars[string]",
    "$year": "Returns current year",
    "$day": "Returns current day or date;$day[Return day of the week (yes/no)]",
    "$month": "Returns current month;$month[Month name (yes/no) (optional)]\n\nExample:\nMonth is $month[yes] ($month)\n\n Output:\nMonth is March (3)",
    "$second": "Returns current second",
    "$hour": "Returns current hour",
    "$minute": "Returns current minute",
    "$botOwnerID": "Returns the ID of the bot owner\nIf the bot belongs to a team, it'll return multiple IDs\nOptionally, and if there is more than one owner (team), you can input a separator.;$botOwnerID or $botOwnerID[separator]",
    "$stringStartsWith": "Determines whether given message starts by another message or not;$stringStartsWith[message;text]\n\nExample:\n$stringStartsWith[Hello World;Hello]\n\nOutput:\ntrue\n\nExample:\n$stringStartsWith[Hello World;Hate]\n\nOutput:\nfalse",
    "$deleteMessage": "Deletes a message using its ID, if no channel ID is present it'll use the default channel;$deleteMessage[messageID] or $deleteMessage[channelID;messageID]",
    "$messageWebhookID": "Returns the ID of the webhook that sent this message",
    "$messageFlags": "Returns the message flags for this message",
    "$math": "Calculate an expression;$math[Expression;X;Y;Z]\n\nExample 1:\n$math[5*2+3]\n\nOutput:\n13\n\nExample 2:\n$math[x*y+3;5;3]\n\nOutput:\n18",
    "$channelCooldown": "Sets a cooldown to current channel for current command;$channelCooldown[time (default 5s);error message]",
    "$timezone": "Set or return current timezone;$timezone or $timezone[timezone]",
    "$editChannel": "Edit a guild channel data;$editChannel[channelID;categoryID/$default;name/$default;position/$default;nsfw/$default (yes/no);bitrate/$default;userLimit/$default;syncPermission/$default (yes/no);reason (optional)]",
    "$setRoles": "Set some roles into guild member;$setRoles[userID;roleID;roleID;...]",
    "$emojisFromMessage": "Returns all the unicode and custom emojis from user arguments or given text;$emojisFromMessage or $emojisFromMessage[text;separator (optional)]",
    "$highestServerRole": "Returns the ID of the highest role in this server",
    "$lowestServerRole": "Returns the ID of the lowest role in this server",
    "$lowestRole": "Returns the user's lowest role ID in this server;$lowestRole or $lowestRole[userID]",
    "$serverDescription": "Returns the server's description",
    "$userRoleColor": "Returns the user's highest role color hex;$userRoleColor or $userRoleColor[userID]",
    "$channelPermissionsFor": "Returns the permissions for this user/role in a channel;$channelPermissionsFor[userID/role id] or $channelPermissionsFor[channelID;userID/role id]\n\nExample:\n$channelPermissionsFor[$channelID;$authorID]\n\nOutput:\nCreate Instant Invite, Kick Members, Ban Members, Administrator, Manage Channels, Manage Guild, Add Reactions, View Audit Log, Priority Speaker, Stream, View Channel, Send Messages, Send Tts Messages, Manage Messages, Embed Links, Attach Files, Read Message History, Mention Everyone, Use External Emojis, View Guild Insights, Connect, Speak, Mute Members, Deafen Members, Move Members, Use Vad, Change Nickname, Manage Nicknames, Manage Roles, Manage Webhooks, Manage Emojis And Stickers, Use Application Commands, Request To Speak, Manage Events, Manage Threads, Use Public Threads, Create Public Threads, Use Private Threads, Create Private Threads, Use External Stickers, Send Messages In Threads, Start Embedded Activities, Moderate Members",
    "$usersTyping": "Returns the users that are currently typing in a channel;$usersTyping or $usersTyping[channelID;mention/tag/username (optional);separator (optional)]",
    "$hasAnyPerm": "Checks if an user or author has one of the provided permissions;$hasAnyPerm[permission1;permission2;...] or $hasAnyPerm[userID;permission1;permission2;...]",
    "$messagePublish": "Announces given message to all the channels that follow this channel\nMessages can only be announced / published if they come from a news channel;$messagePublish or $messagePublish[messageID] or $messagePublish[channelID;messageID]",
    "$hasAnyRole": "Checks if the author or user have at least one of the provided role IDs;$hasAnyRole[roleID1;roleID2;...] or $hasAnyRole[userID;roleID1;roleID2;...]\n\nExample:\n$onlyIf[$hasAnyRole[$authorID;Admin]==true;You are not admin]\nYou are admin!\n\nOutput:\nYou are admin!",
    "$isTicket": "Checks if a channel is a ticket or not;$isTicket or $isTicket[channelID]",
    "$roleMembersCount": "Returns the amount of users with given role ID.\nThis data comes from the cache, not the api, therefore it may not be precise unless all the guild members are cached.;$roleMembersCount[roleID]",
    "$getChannelSlowmode": "Get the slowmode duration of a channel(returns 0 if none).;$getChannelSlowmode or $getChannelSlowmode[channelID]",
    "$emojiExists": "Checks if given emoji ID is available to the bot.;$emojiExists[emojiID]",
    "$spliceTextJoin": "Splits a text by given separator1 and then splits it every X amount of times to then join each splitted array with given separator2 which is then joined with separator3;$spliceTextJoin[text;separator1;separator2;separator3;every]||//Separating user roles in this format:",
    "$removeContains": "Deletes every message that includes given words in a channel.;$removeContains[channelID;limit;word1;word2;...]",
    "$stringEndsWith": "Checks if given message ends with given text;$stringEndsWith[message;text]\n\nExample:\n$stringEndsWith[Hello World;World]\n\nOutput:\ntrue\n\nExample:\n$stringEndsWith[Hello World;Discord]\n\nOutput:\nfalse",
    "$userReacted": "Checks if an user has reacted to a message.;$userReacted[messageID;userID;emoji] or $userReacted[channelID;messageID;userID;emoji]",
    "$disableRoleMentions": "Disables all role mentions in the bot's message;$disableRoleMentions",
    "$boostingSince": "Returns data when given user started boosting this server.;$boostingSince or $boostingSince[userID;date/ms (optional)]",
    "$disableChannelMentions": "Disables all channel mentions in this code",
    "$disableEveryoneMentions": "Disables all mentions with @everyone Role.",
    "$enableEveryoneMentions": "enable mention on @everyone.",
    "$abbreviate": "Abbreviate the provided numbers.;$abbreviate[number]",
    "$channel": "A compact function with 18 different functionalities!;$channel[channelID;option]\n\nOption can be:\nname, id, isdeleted, mention, position, rawposition, topic, type, created, timestamp, guildid, guildname, ismanageable, parentid, parentname, isviewable, isdeletable",
    "$emoji": "A compact function with 11 different functionalities!;$emoji[emojiID;option]\n\nOption can be:\ncreated, emoji, guildid, id, identifier, isanimated, isdeleted, ismanaged, name, url, authorid",
    "$guild": "A compact function with 21 different functionalities!;$guild[option]",
    "$msg": "A compact function with more than [20 different functionalities](https://doc.ccommandbot.com/Message/msg.html#usage-msg-channelid-messageid-property);$msg[channelID;messageID;option;additional 1 (optional);additional 2 (optional)]\n\nAdditional 1:\nused to specify Attachment number for attachment, attachmentname options\nalso used to specify embeds number in case there is more than one embed in message for embed-related options like embedtitle (default: 0)\n\nAdditional 2:\nUsed to specify field number in embed field-related options such as embedfieldname, embedfieldvalue.. (default: 0)\n\nExample 1:\nEmbed title is: $msg[8xxx1;8xxx2;embedtitle]\n\nOutput:\nEmbed title is: an embed title\n\nExample 2:\nField 2 name is: $msg[8xxx1;8xxx2;embedfieldname;;1]\n\nOutput:\nField 2 name is: the field name at 2nd position",
    "$role": "A compact function with 16 different functionalities;$role[roleID;option]",
    "$user": "A compact function with 12 different functionalities;$user[userID;option]",
    "$ordinal": "Returns the given number as an ordinal number.",
    "$isEmoji": "Returns true if the content is a default emoji. Returns false otherwise.",
    "$let": "Assigns data to a temporary variable that can be changed and retrieved later in the command;$let[variable name;variable value;remain after execution (yes/no , default no) (optional)]",
    "$get": "return variable value that was saved using `$let`;$get[variable_name;value if not defined] or $variable_name\n\nExample:\n$let[name;Rake]\nHello $get[name]\n\nOutput:\nHello Rake\n\nExample Using Short Form:\n$let[name;Rake]\nHello $name\n\nOutput: Hello Rake",
    "$formatDate": "Formats a Date in Milliseconds / Stringed Date / ISO String to default/given format. Almost a full coverage of moment npm format date, syntax of formats can be found in https://momentjs.com/docs/#/parsing/string-format/;$formatDate[date in ms / string / iso string / javascript convertable date;format]",
    "$humanizeMS": "Converts Milliseconds into a Readable durations;$humanizeMS[MS;limit (Number) (optional), separator (optional)]",
    "$resolveEmojiID": "Resolves a full emoji / id / name into its ID.;$resolveEmojiID[emoji string/name/id]",
    "$filterMessageWords": "Removed words from the message.;$filterMessageWords[text;caseSensitive (yes/no);...words]",
    "$concatTextSplit": "Adds elements to the current textSplit elements.;$concatTextSplit[text;separator]",
    "$indexOf": "Returns the position of <char> in <text>. Returns 0 if there's no char in text.;$indexOf[text;char]",
    "$textSlice": "Returns <text> after given position or text in between X and Y;$textSlice[text;x;y (optional)]\n\nExample:\n$textSlice[Hello world;0;5]\n\nOutput:\nHello",
    "$textTrim": "Removes useless spaces from given text.;$textTrim[text]\n\nExample:\n$textTrim[             My name is Mido             ]\n\nOutput:\nMy name is Mido",
    "$mentionType": "Uses an argument to determine the type of the mention (role, user, channel or none).;$mentionType[mention argument]",
    "$initVar": "initalizes a Var with a default value if the var is undefined or does not exist;$initVar[server/message/channel/user;varname;Defaultvalue;id(optional)]",
    "$deleteUserVar": "Delete a local user var from database.;$deleteUserVar[variable;userID (optional)]",
    "$deleteServerVar": "Delete a server var from database.;$deleteServerVar[variable]",
    "$deleteChannelVar": "Delete a channel var from database.;$deleteChannelVar[variable;channelID (optional)]",
    "$deleteMessageVar": "Delete a message var from database.;$deleteMessageVar[variable;messageID (optional)]",
    "$uri": "Decodes or Encodes a url Example when you encode a url 'hello world' = 'hello%20world' ;$uri[decode/encode;text]\n\nExample (Encoding):\n$uri[encode;Hello World]\n\nOutput:\nHello%20World\n\nExample (Decoding):\n$uri[decode;Hello%20World]\n\nOutput:\nHello World",
    "$regexMatch": "To match a text with regex expression;$regexMatch[text;Regex;Regex Flag like g (optional);group index (optional, default 0)]",
    "$stop": "It will cause the interpreter to stop the execution;$stop[Message (optional)]\n\nExample:\n$channelSendMessage[$channelID;This will be sent!]\n$stop[Stopping message!]\n$channelSendMessage[$channelID;This won't be sent!]\n\nOutput:\nThis will be sent!",
    "$setTimeout": "Will execute the code inside it after certain time;$setTimeout[time (like 5s, default=10s);name (optional);user id (optional);return token (yes/no) (optional, default no)]\n\nExample:\n$setTimeout[5s]\n Hello world! after 5 sec\n$endTimeout\n\nOutput:\nHello world! after 5 sec",
    "$endTimeout": "To close $setTimeout;$endTimeout",
    "$parseTime": "Parse human readable time into milliseconds;$parseTime[time]\n\nExample:\n$parseTime[1m]\n\nOutput:\n60000",
    "$button": "Creates a Discord Button with a label ,color ,id/link ;$button[label;style/url;link/id;emoji(optional);disabled (yes/no, optional)]\n\nExample (button):\n$button[B;green;id]\n\nExample(emoji):\n$button[emoji;red;id;🚚]\n$button[emoji;red;id;$customEmoji[emojiname]]\n\nExample(link):\n$button[B;url;https://example.com]\n\nAvailable Button Colors:\nred, green, blurple, gray/grey",
    "$buttonID": "return the button ID, return undefined if not found",
    "$buttonEmoji": "return the clicked button emoji in Button trigger, return undefined if not found",
    "$buttonLabel": "return the clicked button label in Button trigger, return undefined if not found",
    "$buttonURL": "return the clicked button URL in Button trigger if exists , return undefined if not found",
    "$buttonStyle": "return the clicked button style like blurple/red/url in Button trigger, return undefined if not found",
    "$buttonIsDisabled": "return true if button is disabled, false otherwise, return undefined if not found",
    "$forEach": "Will loop over a list and every loop it will take an item and assign in inside varname accessible by $get[varname];$forEach[varname;LIST (ex: mido rake azz);Seperator (Optional, default is space)]\nSOME CODE HERE...\n$endForEach\n\nExample:\n$forEach[name;mido rake azz blek felix]\n Hello $get[name]\n$endForEach\n\nOutput:\nHello mido\nHello rake\nHello azz\nHello blek\nHello felix",
    "$endForEach": "its used as closer for $forEach;Example:\n$forEach[...]\nCODE\n$endForEach",
    "$seq": "return sequence of Numbers decided by a starting (inclusive) number and stop at ending (inclusive) number with step\nMax of 1k number;$seq[Start;End;Step (optional, default=1)]\n\nExample:\n$seq[0;5]\n\nOutput:\n0 1 2 3 4 5",
    "$addButton": "Adding a button to a message;$addButton[Message ID;Label;style/url;link/id;emoji(optional);Adding in new row (yes/no, optional); disabled (yes/no, optional)]\n\nAvailable Button Colors: red, green, blurple, grey\n\nExample:\n$addButton[863xxxxxxxxxx21130;Visit example.com;url;https://example.com]",
    "$removeButton": "Remove a button from a message by (label/emoji/url/id);$removeButton[Message ID;Label/Emoji/URL/ID (optional, empty means removing the last button)]\n\nExample (Remove Button by label):\n$removeButton[863xxxxxxxxxx21130;Visit example.com]\n\nExample (Remove Last button):\n$removeButton[863xxxxxxxxxx21130]",
    "$getObjectKeys": "Return the object keys with seperator (default is space if not provided);$getObjectKeys or $getObjectKeys[Seperator (optional)]",
    "$function": "Create a user-defined function that can be called by $callFunction or $functionName (see !!func $callFunction)\n**Note:** function name cant start with number, and must be within [A-Z or a-z or _ or 0-9];$function[Function name;Param 1 (optional);Param 2...(optional)]\nCODE...\n$endFunction\n\nExample Of Printing Hello To a user:\n$function[printHello;name]\n\tHello $name\n$endFunction\n$printHello[Rake]\n\nOutput:\nHello Rake\n\nExample but with $return:\n$function[printHello;name]\n\t$return[Hello $name]\n\t[This message wont be returned]\n$endFunction\n$printHello[Rake]\n\nOutput:\nHello Rake",
    "$endFunction": "To close $function;$endFunction\n\nExample:\n$function[Function Name;Paramaters..]\n\nCODE\n\n$endFunction",
    "$callFunction": "To call a user-defined function created by $function;$callFunction[Function Name;Argument 1 (optional);Argument 2....(optional)]\n\nShort format:\n$functionName[Argument 1(optional);Argument 2...(optional)]\n\nExample:\n$function[add;num1;num2]\n   $return[$math[$num1+$num2]]\n$endFunction\n$callFunction[add;2;4]\n$add[2;4]\n\nOutput: \n6\n6",
    "$return": "Can only be used inside user-defined function created by $function\nIt has no effect outside the user-defined function;$return[Return Value]\n\nExample:\n$function[add;num1;num2]\n   $return[$math[$num1+$num2]]\n$endFunction",
    "$dm": "Redirects the output to a user dm;$dm or $dm[userID (optional)]",
    "$sendDM": "Sends a dm message to given user ID.;$sendDM[userID (optional);message;return message id or undefined,if message could not be send (yes/no , default is no)]",
    "$moveUser": "Move an user from a voice channel or disconnect them if optional params are not provided;$moveUser[userID;channelID (optional);reason (optional)]",
    "$modifyRole": "Modifies the role by using their ID.;$modifyRole[roleID;name (optional);color (optional);mentionable(yes/no, optional);hoisted(yes/no, optional);position (optional)]",
    "$muteUser": "(Un)Mute an user in voice channel;$muteUser[userID;mute (yes/no);reason (optional)]",
    "$disableButton": "Disables a button from a message by (label/emoji/url/id);$disableButton[Message ID;Label/Emoji/URL/ID (optional, empty means disable the last button)]\n\nExample (Disable Button by label):\n$disableButton[863xxxxxxxxxx21130;Visit example.com]\n\nExample (Disable Last button):\n$disableButton[863xxxxxxxxxx21130]",
    "$editButton": "To edit a button given by message id and a query if there's multiple buttons in that message;$editButton[Message ID;Query (optional, default: edit the last button);label/style/emoji/disabled/url/custom_id;New Value]\n\nExample disabling the last button:\n$editButton[863xxxxxxxxxx21130;;disabled;yes]\n\nExample of Editing the label of button name [Hello World]:\n$editButton[863xxxxxxxxxx21130;Hello World;label;Hello Universe]",
    "$voiceChannelID": "To return the voice channel id where the user join/left in voice trigger\nin situation of moving from channel to channel, this function will return the new channel\nThis function is **deprecated**, please use `$vcBefore, $vcAfter` instead;$voiceChannelID",
    "$resetRandom": "To reset the randoms like $random functions, to return a new randomzied value;$resetRandom\n\nExample:\nDice: $random[1;7]\n$resetRandom\nAnother Dice: $random[1;7]",
    "$botTier": "Return the bot tier",
    "$modifyRolePerms": "Modifying role permissions;$modifyRolePerms[Role ID;+/-Perm1;+/-Perm2...]\n\nExample (adding ban perm and taking kick perm):\n$modifyRolePerms[83xxxxxxxxxxxxxxx1;+ban;-kick]\n\nFor list of permissions name:\nhttps://docs.ccommandbot.com/options/untitled",
    "$void": "A function that eats input but return nothing!;$void[ANYTHING]\n\nExample:\n$let[name;Mido]\nMy name is $void[$get[name]]\n\nOutput:\nMy name is",
    "$transcriptChannel": "To compile latest messages of messages in html file;$transcriptChannel[Channel ID;Send to Channel ID;Message (optional);file name (optional);return message id or undefined.if message could not be send(yes/no default=no)]",
    "$redirectErrors": "To redirect any kind of errors to specific channel, by default errors will appear in execution channel;$redirectErrors[Channel ID]",
    "$spread": "To spread data as arguments inside another function;$spread[seperator (optional,default space);data]\n\nExample (Clone roles list from a user to another):\n$giveRoles[8xxxxxxxxxxxxx1;$spread[, ;$userRoles[$authorID;ids]]]",
    "$toggleRoles": "To remove roles from a user if found, or add these roles if are not found;$toggleRoles[User ID (optional);Role ID 1;Role ID 2...]",
    "$awaitButton": "To wait button to be clicked and return that button id\nIn case of no button clicked, it return undefined;$awaitButton[Message (optional);user id (optional, default:author);timeout (optional, default:15s);button id1 (optional);button id2...]\n\nExample (Wait for user answer with yes or no):\nYour answer is: $awaitButton[{title:Choose}{button:Yes:green::yes}{button:No:red::no};$authorID;;yes;no]",
    "$reply": "to make the bot reply to specific message;$reply[messageID (optional); mention on reply (yes/no, default is no)]\n\nExample (Reply to user message with ping):\nHello $username\n$reply[$messageID;yes]\n\nExample (Reply to user message without ping):\nHello $username\n$reply[$messageID;no]",
    "$eventChannelID": "To return the channel/thread ID which was created/deleted\n**Useful** only inside channel trigger",
    "$eventChannelParent": "To return the channel/thread parent ID which was created/deleted\n**Useful** only inside channel trigger",
    "$createThread": "To create thread of message in a channel;$createThread[Channel ID;Message ID;Thread Name;Reason;Duration (1h/1d/3d/7d);Return ID (yes/no);Private Thread? (yes/no)]",
    "$thread": "To get the informations of a thread;$thread[Thread ID;data]\n\ndata values:\narchivedAt, duration, id, members, membersCount, name, owner, locked, parent\n\nExample:\nThread Owner is <@$thread[$channelID;8xxxx1;owner]>",
    "$getThreads": "To return threads list by channel parent or category or owner ID;$getThreads[Channel ID/Category ID/By Owner ID;Return Data (id/name);Seperator]\n\nExample (Get all threads in guild):\n$getThreads\n\nOutput:\n8xxxx1, 8xxxx2, 8xxxx3\n\nExample (Get threads inside specific channel):\n$getThreads[8xxxxxxx1;name]\n\nOutput:\nGlobla Warming, Azz is epic",
    "$editThread": "To edit an existing thread settings;$editThread[Thread ID;Name;Archived (yes/no);duration (ie. 1d);Rate limit per user (ie. 60s);Locked (yes/no)]",
    "$deleteThreads": "To delete an existing threads in a channel;$deleteThreads[Thread ID 1;Thread ID 2...]",
    "$interactionReply": "replys to Interaction as ephemeral(a message ,which can only get viewed by the author) or normal message like for Button Interactions;$interactionReply[message;ephemeral(yes/no) (optional);return id (yes/no)]",
    "$selectMenu": "creates a select menu with options;Example: $selectMenu[\n        {id=Menu id}\n        {placeholder=Place holder}\n        {min=Minimum allowed selected options}\n        {max=Maximum allowed selected options}\n        {disabled=If menu is disabled or not (yes/no)}\n        {label=Option 1 name}\n        {desc=Option 1 description}\n        {value=Option 1 value}\n        {emoji=Option 1 emoji}\n\n        {label=Option 2 name}\n        {desc=Option 2 description}\n        {value=Option 2 value}\n        {emoji=Option 2 emoji}\n        ...\n\n    ]\nExample2:\n$selectMenu[\n{id=id}\n{placeholder=Please select your anwser!}\n{min=1}\n{max=2}\n{label=Option one }\n{desc=txt for one}\n{value=one}\n{emoji=$customEmoji[accept]}\n{label=Option two }\n{desc=txt for two}\n{value=two}\n{emoji=$customEmoji[reject]}\n]\nSupports upto 20 options",
    "$arrayMap": "To replace array values to another value\n**Note:** Only zero-cooldown functions allowed in CODE;$arrayMap[Element Value;Element Index;array name (optional)]{\nCODE...\n}\n\nExample:\n$textSplit[15,18,21;,]\n$arrayMap[age]{\nage is $age\n}\n$arrayJoin[, ]\n\nOutput:\nage is 15, age is 18, age is 21",
    "$arrayFilter": "To filter an array depend on a value of CODE, if `false` then remove that element from the array\n**Note:** Only zero-cooldown functions allowed in CODE;$arrayFilter[Element Value;Element Index;array name]{\nCODE...\n}\n\nExample (Remove Hello):\n$textSplit[Hello/World;/]\n$arrayFilter[value]{\n$if[$value==Hello]{\nfalse\n}\n}\n$arrayJoin[/]\n\nOutput:\nWorld",
    "$interactionEdit": "To edit a previously sent interaction with $interactionReply;$interactionEdit[New Message;message id (optional, default is previously sent message)]",
    "$interactionDelete": "To delete a previously sent interaction with $interactionReply;$interactionDelete[message id (optional, default is previously sent message)]",
    "$eventSelected": "returns selected values of selectMenus;$eventSelected or $eventSelected[position;seperator]\n\n For Example:\n $eventSelected would return the first selected value\n $eventSelected[2] would return the second selected value,since the pos is 2 \n $eventSelected[;,] would return all selected values seperated by ,",
    "$arrayJoin": "To join the array with specific seperator;$arrayJoin[Seperator (optional);array name (optional)]\n\nExample:\n$textSplit[Rake/Mido/Azz;/]\n$arrayJoin[, ]\n\nOutput:\nRake, Mido, Azz",
    "$arrayPop": "To remove and return the last element in the array;$arrayPop[array name (optional)]\n\nExample:\n$textSplit[Mido/Rake/Azz;/]\nlast one is $arrayPop\nbefore it is $arrayPop\nbefore it is $arrayPop\n\nOutput:\nlast one is Azz\nbefore it is Rake\nbefore it is Mido",
    "$arrayPush": "To add an element to the array (from the last);$arrayPush[Value;array name (optional)]\n\nExample:\n$arrayPush[Mido]\n$arrayPush[Rake]\n$arrayPush[Azz]\n$arrayJoin[/]\n\nOutput:\nMido/Rake/Azz",
    "$arrayShift": "To remove and return the first element in the array;$arrayShift[array name (optional)]\n\nExample:\n$textSplit[Mido/Rake/Azz;/]\nfirst one is $arrayShift\nafter it is $arrayShift\nafter it is $arrayShift\n\nOutput:\nfirst one is Mido\nafter it is Rake\nafter it is Azz",
    "$arraySlice": "To keep only a part of the array;$arraySlice[from;to;array name (optional)]\n\nExample:\n$textSplit[Mido Rake Azz Finkz; ]\n$arraySlice[2;3]\n$arrayJoin[ ]\n\nOutput:\nRake Azz",
    "$arrayUnshift": "To add an element to the array (from the first);$arrayUnshift[value;array name (optional)]\n\nExample:\n$arrayUnshift[Mido]\n$arrayUnshift[Rake]\n$arrayUnshift[Azz]\n$arrayJoin[/]\n\nOutput:\nAzz/Rake/Mido",
    "$arrayLength": "return the elements number in array;$arrayLength[array name (optional)]\n\nExample:\n$textSplit[Mido/Rake/Azz;/]\n$arrayLength\n\nOutput:\n3",
    "$arrayCount": "alias for `$arrayLength`;$arrayCount[array name (optional)]\n\nExample:\n$textSplit[Mido/Rake/Azz;/]\n$arrayCount\n\nOutput:\n3",
    "$arrayGet": "return the element value at specific position in array;$arrayGet[index;array name (optional)]\n\nExample:\n$textSplit[Mido/Rake/Azz;/]\nFirst is $arrayGet[1]\nSecond is $arrayGet[2]\nThird is $arrayGet[3]\n\nOutput:\nFirst is Mido\nSecond is Rake\nThird is Azz",
    "$arraySet": "set element value at specific position in array;$arraySet[index;value;array name (optional)]\n\nExample:\n$textSplit[Mido/Rake/Azz;/]\nBefore: $arrayGet[3]\n$arraySet[3;Finkz]\nAfter: $arrayGet[3]\n\nOutput:\nBefore: Azz\nAfter: Finkz",
    "$joinThreads": "To join thread channel;$joinThreads[Thread ID 1;Thread ID 2...]",
    "$leaveThreads": "To leave thread channel;$leaveThreads[Thread ID 1;Thread ID 2...]",
    "$arraySearch": "To check search of a value in the array;$arraySearch[Value to search;array name (optional)]\n\nExample:\n$textSplit[Mido/Rake/Azz;/]\nMido is in position: $arraySearch[Mido]\nAzz is in position: $arraySearch[Azz]\nInvalidName is in position: $arraySearch[justsomeweirdrandom]\n\nOutput:\nMido is in position: 1\nAzz is in position: 3\nInvalidName is in position: -1",
    "$arrayRemove": "To remove an index in the array\n\nreturn nothing\n\narray name must be non-number;$arrayRemove[Index;Index... (optional);array name (optional)]\n\nExample:\n$textSplit[Hello World, how are you?; ]\n$arrayRemove[1;2;3]\n$arrayGet[1]\n\nOutput:\nare",
    "$arrayInclude": "To check if a value exists in the array\n\nreturn true if exists otherwise false;$arrayInclude[Value;array name (optional)]\n\nExample:\n$textSplit[Mido/Rake/Azz;/]\n$arrayInclude[Rake]\n\nOutput:\ntrue",
    "$ObjectGet": "To return Key value if exists\n\nreturn key value if exists otherwise undefined;$ObjectGet[Key;Key...(optional)]",
    "$ObjectSet": "To set key value\n\nIf key doesnt exist, will set new one;$ObjectSet[Key;Key...(optional);value]\n\nExample:\n$ObjectSet[name;Mido]\n$ObjectGet[name] // Output: Mido",
    "$ObjectCreate": "To create object from JSON input;$ObjectCreate[JSON]\n\nExample:\n$ObjectCreate[{\"name\":\"Mido\",\n\"age\":\"300\"}]\n$ObjectGet[name]\n\nOutput:\nMido\n$ObjectGet[age] // Output: 300",
    "$ObjectValues": "Return the Object values with seperator between each value;$ObjectValues[Seperator (optional, default:, );Nested Propery 1;Nested Property 2]\n\nExample (Get values of nested property):\n$ObjectSet[name;Mido]\n$objectSet[age;300]\n$ObjectValues\n\nOutput:\nMido, 300\n\nExample:\n$objectSet[user;name;Mido]\n$objectSet[user;id;1234]\n$objectSet[user;weapon;Sword]\n$ObjectValues[/;user]\n\nOutput:\nMido/1234/Sword",
    "$ObjectKeys": "Return the Object Keys with seperator between each key;$ObjectKeys[Seperator (optional, default:, );Nested Property 1;Nested Property 2;...]\n\nExample:\n$objectSet[user1;name;Mido]\n$objectSet[user1;id;1234]\n$objectSet[user1;weapon;Sword]\n$objectSet[user2;name;Rake]\n$objectSet[user2;id;5678]\n$objectSet[user2;weapon;Feather]\n$ObjectKeys[/]\n\nOutput:\nuser1/user2\n\nExample (Getting Nested Property Keys):\n$objectSet[user1;name;Mido]\n$objectSet[user1;id;1234]\n$objectSet[user1;weapon;Sword]\n$objectSet[user2;name;Rake]\n$objectSet[user2;id;5678]\n$objectSet[user2;weapon;Feather]\n$ObjectKeys[/;user1]\n\nOutput:\nname/id/weapon",
    "$interactionId": "Return the interaction custom id , works for button and menu..",
    "$removeButtons": "Remove multiple buttons from a message;$removeButtons[Message ID;Button ID1;Button ID2...]",
    "$arrayShuffle": "To shuffle an existing array;$arrayShuffle[array name (optional)]\n\nExample:\n$textSplit[Rake/Azz/Mido;/]\n$arrayShuffe\n$arrayJoin[/]\n\nOutput:\nAzz/Mido/Rake",
    "$arraySort": "sort the array from `$textsplit`\ndepends if you want to sort numerically or alphabetically or occurrences;$arraySort[Ascending (yes/no, default is no);Sort Type;array name (optional)]\n\nSort Types:\n`num`: Sort Numerically\n`alpha`: Sort Alphabetically\n`frequent`: Sort By how many element got repeated\n\nExample (Sort Occurrences):\n$textSplit[3.Mido\n1.Azz\n2.Rake\n2.Rake\n3.Mido\n3.Mido\n4.Finkz;\n]\n$arraySort[no;frequent]\n\nOutput:\nThe sorted list is\n3.Mido\n2.Rake\n4.Finkz\n1.Azz\n\nExample (Sort Numerically):\n$textSplit[1. Azz\n3.Mido\n2.Rake\n4.Finkz;\n]\n$arraySort[yes;num]\nThe sorted list is\n$arrayJoin[\n]\n\nOutput:\nThe sorted list is\n1. Azz\n2.Rake\n3.Mido\n4.Finkz\n\nExample (Sort Alphabetically):\n$textSplit[3.Mido\n1.Azz\n2.Rake\n4.Finkz;\n]\n$arraySort[yes;alpha]\nThe sorted list is\n$arrayJoin[\n]\n\nOutput:\nThe sorted list is\n1. Azz\n4.Finkz\n3.Mido\n2.Rake",
    "$getCommandOption": "To get the command option\nreturn the option value;$getCommandOption[type;Option Name] \n\nExample:\n$getCommandOption[string;name] // Output: Mido \n$getCommandOption[number;age] // Output: 44\n Valid types: string, number, boolean, channel, role, mentionable",
    "$commandName": "To get the slash command name\nreturn the command name;$commandName",
    "$ObjectRemove": "To remove a key from the object;$ObjectRemove[Key;Key...(Optional)]\n\nExample:\n$objectSet[Name;Mido]\n$objectSet[Country;EG]\n$objectKeys // output: Name, Country\n$objectRemove[Name]\n$objectKeys\n\nOutput:\nCountry",
    "$awaitMenu": "To wait for a menu option to be selected and return the selected options values\nIn case of no option selected, it return **undefined**\nIn case of multiple values selected, all of them will return with `,` as seperator;$awaitMenu[Message (optional);user id (optional, default:author);timeout (optional, default:15s);menu id1 (optional);menu id2...]\n\nExample:\n\nYou selected: $awaitMenu[\n{title: Test}\n{menu:\n    {id=test}\n    {placeholder=Select}\n    {min=1}\n    {max=1}\n    {label=Mido}\n    {desc=A guy}\n    {value=mido}\n    {label=Rake}\n    {desc=Another guy}\n    {value=rake}\n}\n;$authorID;;test]\n\nOutput:\n\nYou selected: rake",
    "$getCooldownTime": "To get the cooldown time left set by $cooldown functions in millisecond.\nType can be: user, channel, server;$getCooldownTime[time (i.e 10m);type (i.e server);id (in case of user id or channel id)]\n\nExample:\n$if[$getCoolDownTime[10m;server]!=0]\n    $interactionReply[You can't use this, this command is globally on cooldown]\n    $stop\n$else\n    $servercooldown[10m]\n$endIf\n... REST OF CODE",
    "$categoryChannels": "To get the channels inside category;$categoryChannels[Category ID;Info type (name/id/mention);Seperator (optional, default is \",\")]\n\nExample:\n!!exec $categoryChannels[1004738497191628860;name;, ]",
    "$botVersion": "Return the current CC bot version",
    "$disableMenu": "Disable a menu(s) in given message, not providing Menu ID will disable every menu in the message;$disableMenu[message id;Menu ID 1;Menu ID 2;Menu ID 3;....]",
    "$enableMenu": "enable a menu(s) in given message, not providing Menu ID will enable every menu in the message;$enableMenu[message id;Menu ID 1;Menu ID 2;Menu ID 3;....]",
    "$removeMenu": "remove a menu(s) in given message, not providing Menu ID will remove every menu in the message;$removeMenu[message id;Menu ID 1;Menu ID 2;Menu ID 3;....]",
    "$editMenu": "edit a menu in given message\ntype can be: `id/disabled/max/min/placeholder/ph/options;$editMenu[message id;menu id;type;new value]\n\nExample:\n$editMenu[$messageID;menu_id;placeholder;A new placeholder]",
    "$editEmbed": "edit embed in given message;$editEmbed[channel id (optional);message id (optional);New data (curl);Embed Number (optional, default 1)]\n\nExample:\n$editEmbed[$channelID;$messageID;\n{title:New title}\n]",
    "$userSetTimeout": "Set timeout user so he can't chat or communicate for specified period;$userSetTimeout[user id;time (optional, default:'10m');reason (optional)]",
    "$userRemoveTimeout": "Remove timeout on a user, so he can talk;$userRemoveTimeout[user id;reason (optional)]",
    "$userGetTimeout": "Return timeleft for timeout expiry in milliseconds\nIf user is not timeout, it will return 0;$userGetTimeout[user id]",
    "$getTrigger": "Return the command trigger information like `name` or `type`\n\nValid InfoType: name, token, guild, code, runonlyin, ignorerole, type, typename, trigger, createdby, minperms, channelused;$getTrigger[InfoType;Token (optional)]\n\nExample:\n$getTrigger[name]",
    "$editTrigger": "Edit a command information like `name` or `type`\n\nEditable types: name, runonlyin, ignorerole,  type, trigger, channelused, minperms;$editTrigger[InfoType;New value;Token (optional)]\n\nExample:\n$editTrigger[name;Edited Name]",
    "$deleteTrigger": "delete a command with token, **empty token = delete current command**;$deleteTrigger[Token;Delete Current Trigger If Empty (yes/no, default yes)]",
    "$dateToTime": "Convert date to Time (Date Timezone will use $timeZone value);$dateToTime[Date]",
    "$timeToDate": "Convert timestamp (since 1970 in ms) to formatted Date (Timezone will respect $timeZone value)\nAccept [this format](https://discord.com/channels/772051119538176021/949797746917933126/952064529876021358);$timeToDate[Time;Format (optional)]\n\nExample:\n$timeToDate[$timeStamp;%y%-%m%-%d%]\n\nOutput:\n2022-3-12",
    "$buffer": "It return the input (useful for some rare cases);$buffer[input]\n\nExample:\n$sendMessage[{footer:$buffer[Some :Breaking  :Message]}",
    "$roleIcon": "Sets or return Role Icon in a guild;$roleIcon[name/id;icon (optional)]\n\nExample 1 (Getting Role Icon):\nMember role icon is: $roleIcon[Member]\n\nExample 2: (Set Role Icon With Image)\n$roleIcon[Member;https://cdn-icons-png.flaticon.com/512/6080/6080057.png]",
    "$serverChannels": "Return all the channels inside the guild\n\ninfo can be: name, id;$serverChannels[info (optional, default is name);type (optional, default is all);separator (optional, default is \", \")]\n\nExample:\n$serverChannels[name;text;/]\n\nOutput:\nchannel1/channel2/channel3/channel4",
    "$clearCoolDown": "Clear cooldown set by $cooldown functions\n\nType can be: user, channel, server;$clearCoolDown[type (optional, default user);id (optional, default \"$authorID\")]\n\nExample (cooldown exception for specific user):\n$cooldown[1m;You are in cooldown because you are not mido]\n$if[$username==Mido]\n\t$clearCooldown[user;$authorID]\n$endIf",
    "$membersWithStatus": "Forcible fetch members with those status, and return the ids separated by `,`;$membersWithStatus[Status1;Status2...]\n\nExample:\n$membersWithStatus[online]\n\nOutput:\n1xxxxxxxxxxxxxxxx2,3xxxxxxxxxxxx4",
    "$textShuffle": "Shuffle a text\n**Return**: the shuffled text;$textShuffle[Text;Separator (optional)]\n\nExample:\n$textShuffle[Hello WOrld]\n\nOutput:\nrHl ldeOolW",
    "$userBanner": "Get user banner\n**Return**: `undefined` (in case of no banner) or banner URL;$userBanner[User ID (optional)]",
    "$editWebhookMessage": "Edits a message sent by a webhook;$editWebhookMessage[ID;Token;Message ID;New Content;Thread ID (optional)]",
    "$deleteWebhookMessage": "deletes a message sent by a webhook;$deleteWebhookMessage[ID;Token;Message ID;Thread ID (optional)]",
    "$userVarRank": "Return user var rank returned by $userleaderboard for a single user;$uservarRank[Variable name;Order Type (optional) (asc/desc, default is desc);User ID (optional)]\n\nExample:\nYour rank is $userVarRank[xp]\n\nOutput:\nYour rank is 3",
    "$getMessageReactions": "Return the reactions in a given message;$getMessageReactions[Channel ID (optional, default is $channelID);Message ID (optional, default is $messageID);Separator (optional, default is ',')]",
    "$getReactionCount": "Return the reaction count in a given message;$getReactionCount[Channel ID (optional, default is $channelID);Message ID (optional, default is $messageID);Reaction]\n\nExample:\nUsers agree with this decision: $getReactionCount[$channelID;12345678987654321;👍]\n\nOutput:\nUsers agree with this decision: 13",
    "$vcBefore": "Return the voice channel id that user just left in voice trigger",
    "$vcAfter": "Return the voice channel id that user just join in voice trigger",
    "$menuId": "Return the menu id of the menu in Select Menu Trigger",
    "$timeoutBy": "Return the user id of the admin/mod that timeout the user in Timeout trigger",
    "$timeoutReason": "Return the reason of timeout in Timeout trigger",
    "$timeoutAction": "Return `add` in case of timeout user, `remove` in case of timeout got removed by someone in Timeout trigger",
    "$disableButtons": "Disable buttons in a message, not providing button id will disable every button in the message;$disableButtons[Message ID;Button ID 1;Button ID 2;....]",
    "$enableButtons": "Enable buttons in a message, not providing button id will enable every button in the message;$enableButtons[Message ID;Button ID 1;Button ID 2;....]",
    "$abs": "Return the absolute of a number;$abs[Number]\n\nExample:\n$abs[-15]\n\nOutput:\n15\n\nExample:\n$abs[5]\n\nOutput:\n15",
    "$mathMin": "Return the lowest number from a list of numbers;$mathMin[Number 1;Number 2;Number 3;...]\n\nExample:\n$mathMin[100;50;150]\n\nOutput:\n50",
    "$mathMax": "Return the highest number from a list of numbers;$MathMax[Number 1;Number 2;Number 3;...]\n\nExample:\n$MathMax[100;50;150]\n\nOutput:\n150",
    "$ceil": "rounds a number up to the next largest integer;$ceil[Number]\n\nExample:\n$ceil[1.3]\n\nOutput:\n2\n\nExample:\n$ceil[3.5]\n\nOutput:\n4",
    "$floor": "return the largest integer less than or equal to a given number;$floor[Number]\n\nExample:\n$floor[2.4]\n\nOutput:\n2\n\nExample:\n$floor[2.9]\n\nOutput:\n2",
    "$arrayReverse": "To reverse the array;$arrayReverse[array name (optional)]\n\nExample:\n$textSplit[Number 1/Number 2/Number 3;/]\n$arrayReverse\n$arrayJoin[/]\n\nOutput:\nNumber 3/Number 2/Number 1",
    "$ignoreErrors": "It will tell the interpreter to ignore the errors and in case of error, the function will return the placeholder you specified;$ignoreErrors[yes/no;placeholder (default: error)]\n\nExample:\n$ignoreErrors[yes;invalid math]\nMath 1 (valid): $math[1+3]\nMath 2 (invalid): $math[a+b]\n\nOutput:\nMath 1 (valid): 4\nMath 2 (invalid): invalid math",
    "$modal": "Send a modal, it will only work in interaction-related triggers\n**Note**: You can only use this within 2 seconds of execution;$modal[\n{title=Modal Title}\n{id=Modal ID (anything)}\n{input=\n\t{name=Input name}\n\t{ph=Input Placeholder}\n\t{id=Input ID}\n\t{type=short/long}\n\t{min=Minimum length}\n\t{max=Maximum Length}\n\t{required=yes/no}\n\t{def=Default value}\n}]",
    "$modalID": "To get the modal id that triggered the custom command;$modalId",
    "$modalAnswer": "To get the modal submitted answer by user,  by id or index;$modalAnswer[Input ID/Index]\n\nExample:\n$modalAnswer[1] or $modalAnswer[name]",
    "$getChannelMessages": "To return list of messages ids;$getChannelMessages[Channel ID;From User ID or everyone (default is everyone);ids/contents;separator;amount (max is 50);reverse (yes/no, default is no)]\n\nExample 1:\n$getChannelMessages[$channelID;$authorID;everyone;ids;/;2]\n\nOutput:\n982807194485555300/982807196318457918",
    "$arrayUnique": "Return the unique elements in the array glued with the separator;$arrayUnique[Separator (default ', ');Trim Element before check? (default is yes);array name (optional)]\n\nExample:\n$textSplit[Mido/Rake/Rake/Mido/Azz;/]\n$arrayUnique[, ]\n\nOutput:\nMido, Rake, Azz",
    "$eventOldNickname": "Return the old nickname in Nickname trigger",
    "$eventNewNickname": "Return the new nickname in Nickname trigger",
    "$modifyUserRoles": "To modify user roles, you can add/remove/toggle roles in same time\n**op** can be:\n`+` for add\n`-` for remove\n`~` for toggle;$modifyUserRoles[User ID;[op]Role 1;[op]Role 2;....]\n\nExample (add role 1 and remove role 2):\n$modifyUserRoles[$authorID;+role 1;-role 2]",
    "$messageStickers": "To return the user message stickers (id)\n**Index**: starts with 1, leaving it empty return all stickers ids separated by `, `;$messageStickers[Index]\n\nExample:\n$messageStickers[1]\n\nOutput:\n 992970796031017080",
    "$sticker": "To return an information about a sticker using ID\n**Info** can be: name,desc,url,tags,time;$sticker[Sticker ID;name;Info]\n\nExample:\n$sticker[992974663099629588;name]\n\nOutput:\nSmiley",
    "$deleteSticker": "To delete a sticker inside the server;$deleteSticker[Sticker ID]",
    "$editSticker": "To edit a sticker inside the server\n**Info** can be: name,desc,emoji;$editSticker[Sticker ID;Info;New Value]\n\nExample:\n$editSticker[992974663099629588;name;MyNewSmily]",
    "$serverStickers": "To return all server stickers's id;$serverStickers[Separator]\nExample:\n$serverStickers[, ]\n\nOutput:\n 992974663099629588, 992970796031017080",
    "$arrayLoop": "To loop over the array\n**Note:** Only zero-cooldown functions allowed in CODE;$arrayLoop[varname;index;array name (optional)]{\nCODE...\n}\n\nExample:\n$textSplit[15,18,21;,]\n$arrayLoop[age]{\nage is $age\n}\n\nOutput:\nage is 15\nage is 18\nage is 21",
    "$includeLibrary": "To include code created in Library trigger;$includeLibrary[Library name]",
    "$guildEvents": "to get the guild events\n\ninfo type can be : id/name\nfilter can be: active,scheduled;$guildEvents[info type;filter;separator (default is ', ')]\n\nExample (get the names of active events):\n$guildEvents[name;active;/]\n\nOutput:\nEvent 1/Event 2",
    "$getEventInfo": "to get an information about an event in the guild\n\ninfo type can be: id, name, owner, channel, desc, description, start_time, end_time, status, type, location, cover, users_count, url, privacy;$getEventInfo[event id;info type]\n\nExample:\n$getEventinfo[123456789123456789;name]\n\nOutput:\nEvent Name",
    "$getEventUsers": "to get the users interested in an event;$getEventUsers[event id;separator (default is ', ')]\n\nExample:\n$getEventUsers[123456789123456789]\n\nOutput:\n123456789, 987654321",
    "$eventExists": "to check if an event exists or not;$eventExists[event id]\n\nExample:\n$eventExists[Invalid event id]\n\nOutput:\nfalse",
    "$deleteEvent": "to delete an already existed event;$deleteEvent[event id]",
    "$arrayClear": "empty the array;$arrayClear[array name (optional)]\n\nExample:\n$textSplit[Hello World; ]\nBefore=$arrayJoin[, ]\n$arrayClear\nAfter=$arrayJoin[, ]\n\nOutput:\nBefore=Hello, World\n\nAfter=",
    "$randomTextBiased": "same as $randomText but with biased random;$randomTextBiased[Text1,Percentage1;Text2,Percentage2;Text3,Percentage3]\n\nNote:\nPercentages must sum up to 100, the more percentage for text, the more likely it will be selected\n\nExample (Unlucky guy):\nYour reward is: $randomTextBiased[Common,80;Rare,10;Epic,8;Platinum,2] Box\n\nOutput:\nYour reward is: Common Box\n\nExample (Lucky guy):\nYour reward is: $randomTextBiased[Common,80;Rare,10;Epic,8;Platinum,2] Box\n\nOutput:\nYour reward is: Epic Box",
    "$triggerExists": "Check if a trigger with token exists or not;$triggerExists[Token]\n\nExample (An existing trigger):\n$triggerExists[fx1d53]\n\nOutput:\ntrue\n\nExample (not available trigger):\n$triggerExists[abcdef]\n\nOutput:\nfalse",
    "$addUsersToThread": "Add users to a thread;$addUsersToThread[Thread ID;User 1 ID;User 2 ID;User 3 ID....]\n\nExample (Add the triggerer to a thread):\n$addUsersToThread[1024373454578917426;$authorID]\n\nExample (add multiple users):\n$addUsersToThread[1024373454578917426;$authorID;788361834360864808]",
    "$removeUsersFromThread": "remove users from a thread;$removeUsersFromThread[Thread ID;User 1 ID;User 2 ID;User 3 ID....]\n\nExample (remove the triggerer from a thread):\n$removeUsersFromThread[1024373454578917426;$authorID]\n\nExample (remove multiple users):\n$removeUsersFromThread[1024373454578917426;$authorID;788361834360864808]",
    "$lockThread": "lock/unlock a thread;$lockThread[Thread ID;Lock? (yes/no)]\n\nExample (Locking a thread):\n$lockThread[1024373454578917426]\n\nExample (Unlocking a thread):\n$lockThread[1024373454578917426;no]",
    "$archiveThread": "archive/unarchive a thread;$archiveThread[Thread ID;Archive? (yes/no)]\n\nExample (Archiving a thread):\n$archiveThread[1024373454578917426]\n\nExample (Unarchiving a thread):\n$archiveThread[1024373454578917426;no]",
    "$getOption": "get the user input for specific option;$getOption[Option name]\n\nExample:\n$getOption[user]",
    "$hyperlink": "helps you construct hyper link that works inside embeds;$hyperlink[url;title]\n\nExample:\n$description[$hyperlink[https://discord.com;Join us in discord]]",
    "$botVerified": "checks if a bot is verified or not;$botVerified[bot id]\n\nExample (Verified bot):\n$botVerified[725721249652670555]\n\nOutput:\ntrue\n\nExample (not verified bot):\n$botVerified[582019849073590274]\n\nOutput:\nfalse",
    "$createSticker": "create a new sticker in the server;$createSticker[name;image url (png/apng, max 512KB);emoji;description (optional);return sticker id (yes/no)]\n\nExample:\n$createSticker[Happy Earth;https://media.discordapp.net/attachments/951590503370063872/1028690645222690867/happy_earth.png;😄;I'm happy when earth is happy]",
    "$setBotActivity": "set a custom bot activity like `Watching ?help`;$setBotActivity[activity type;activity text]\n\n# Activity types are:\nplaying, streaming, listening, watching, competing\n\nExample:\n$setBotActivity[listening;The Cosmos]",
    "$getBotActivity": "get a custom bot activity;$getBotActivity[information type]\n\n# Information type can be `text` or `type`\n\nExample:\n$getBotActivity[text]\n\nOutput:\nThe Cosmos",
    "$arrayCreate": "Creates an array from a list;$arrayCreate[List;separator;array name (optional)]\n\nExample:\n$arrayCreate[Mido/Rake/Azz;/]\n1 is $arrayGet[1]\n2 is $arrayGet[2]\n3 is $arrayGet[3]\n\nOutput:\n1 is Mido\n2 is Rake\n3 is Azz",
    "$sentMessageID": "Retrieve the recently sent message in the code;$sentMessageID\n\nExample (Delete Sent Message After 3 Seconds):\n$sendMessage[Hello World]\n$wait[3s]\n$deleteMessage[$sentMessageID]",
    "$isConnected": "To check whether user is connected to voice channel or not (only cached users);$isConnected[User ID]\n\nExample:\nIs $username Connected To Channel?: $isConnected\n\nOutput:\nIs Mido Connected To Channel?: true",
    "$isStreaming": "To check whether user is streaming in a voice channel or not (only cached users);$isStreaming[User ID]\n\nExample:\nIs $username Streaming?: $isStreaming\n\nOutput:\nIs Mido Streaming?: false",
    "$regexCheck": "To check if a text match a regex or not;$regexCheck[Text;Regex;Flags]\n\nExample (Check If Text is alphabets):\n$regexCheck[ABC;^[a-zA-Z]+$]\n\nOutput:\ntrue\n\nExample:\n$regexCheck[A2B;^[a-zA-Z]+$]\n\nOutput:\nfalse",
    "$ObjectLoop": "To loop over the object\n**Note:** Only zero-cooldown functions allowed in CODE;$ObjectLoop[key name;value name;index name;Nested Prroperty 1;Nested Property 2;...]{\nCODE...\n}\n\nExample:\n$objectSet[Mido;Sword]\n$objectSet[Rake;Staff]\n$objectLoop[name;weapon;index]{\n$index. $name has $weapon\n}\n\nOutput:\n1. Mido has Sword\n2. Rake has Staff",
    "$arrayElementCount": "This function is used to count the number of times a specific element appears in an array. It takes three parameters: the element to count, whether or not to trim whitespace before comparing elements, and the name of the array to search;$arrayElementCount[Element To Count;Trim before compare (yes/no);array name]\n\nExample:\n$arrayCreate[Mido/Rake/Mido/Rake/Rake/Azz/Faj;/]\nRake repeated $arrayElementCount[Rake] times\nMido repeated $arrayElementCount[Mido] times\nAzz repeated $arrayElementCount[Azz] times\nFaj repeated $arrayElementCount[Faj] times\n\nOutput:\nRake repeated 3 times\nMido repeated 2 times\nAzz repeated 1 times\nFaj repeated 1 times",
    "$ObjectKeyExists": "To check if a key is exists in the object, returns true or false;$ObjectKeyExists[Key;Nested Key...(optional)]\n\nExample:\n$objectSet[name;Mido]\n$objectKeyExists[name]\n\nOutput:\ntrue\n\nExample:\n$objectSet[name;Mido]\n$objectKeyExists[age]\n\nOutput:\nfalse",
    "$conditional": "return A if condition is true, B if condition is false;$conditional[condition;A;B]\n\nExample:\n$conditional[$username==Mido;You are Mido;You are Rake]\n\nOutput (if Mido run the command):\nYou are Mido\n\nOutput (if Rake run the command):\nYou are Rake",
    "$cacheChannelMessages": "Force cache latest messages of a channel\nIt will cache up to 50 messages for main bot, and 100 messages for tier 3+;$cacheChannelMessages[Channel ID (default is $channelID)]",
    "$latestMessage": "Return the latest message content/id in a channel, uses the cache;$latestMessage[Channel ID (default is $channelID);User ID (default everyone);Return Message ID instead (yes/no, default no)]\n\nExample 1 (Return Latest Content):\n$latestMessage[$channelID]\n\nOutput:\nHello World\n\nExample 2 (Return Latest ID):\n$latestMessage[$channelID;everyone;yes]\n\nOutput: \n1234567890",
    "$padLeft": "Adds a filling text at the start of text, depend on the maximum length;$padLeft[Text;Max Length;Filling Text]\n\nExample:\n$padLeft[5;2;0]\n$padLeft[13;2;0]\n\nOutput:\n05\n13",
    "$padRight": "Adds a filling text at the end of text, depend on the maximum length;$padRight[Text;Max Length;Filling Text]\n\nExample:\n$padRight[I like custom commands;25;.]\n\nOutput:\nI like custom commands...",
    "$increaseUserVar": "To increase user variable with a certain amount;$increaseUserVar[variable name;amount/expression;user id;default amount (default is 0)]\n\nExample (increase user money by 1000):\n$increaseUserVar[money;1000]\n\nExample (double the money):\n\nBefore: $getUserVar[money]\n$increaseUserVar[money;x*2]\nAfter: $getUserVar[money]\n\nOutput:\nBefore: 1000\nAfter: 2000",
    "$increaseChannelVar": "To increase channel variable with a certain amount;$increaseChannelVar[variable name;amount/expression;channel id;default amount (default is 0)]\n\nExample (increase channel messages by 1):\n$increaseChannelVar[messages;1]\n\nExample (double the messages):\n\nBefore: $getChannelVar[messages]\n$increaseChannelVar[messages;x*2]\nAfter: $getChannelVar[messages]\n\nOutput:\nBefore: 5\nAfter: 10",
    "$increaseServerVar": "To increase server variable with a certain amount;$increaseServerVar[variable name;amount/expression;default amount (default is 0)]\n\nExample (increase ticket numbers by 1):\n$increaseServerVar[ticket numbers;1]\n\nExample (double the messages):\n\nBefore: $getServerVar[ticket numbers]\n$increaseServerVar[ticket numbers;x*2]\nAfter: $getServerVar[ticket numbers]\n\nOutput:\nBefore: 5\nAfter: 10",
    "$viewChannelVars": "View a list of all the variables that are defined for a specific channel, and search for specific variables using a regular expression query filter;$viewChannelVars[Channel ID (default: $channelID);Separator;Query Regex (optional)]\n\nExample:\n$viewChannelVars\n\nOutput:\nticket, ticket_owner, staff\n\nExample (return only variables that starts with ticket):\n$viewChannelVars[$channelID; ,;^ticket]\n\nOutput:\nticket, ticket_owner",
    "$isUserMention": "To check if text provided satisfy discord user mention format or not;$isUserMention[Text]\n\nExample:\n$isUserMention[abc]\n\nOutput:\nfalse\n\nExample:\n$isUserMention[<@!1234567890>]\n\nOutput:\ntrue",
    "$isChannelMention": "To check if text provided satisfy discord channel mention format or not;$isChannelMention[Text]\n\nExample:\n$isChannelMention[abc]\n\nOutput:\nfalse\n\nExample:\n$isChannelMention[<#1234567890>]\n\nOutput:\ntrue",
    "$ObjectIncrease": "To increase key value, if not exists, it will create it and set to the value;$ObjectIncrease[Key;Amount]\n\nNotes on Amount:\n* It can be a number like `5`, or negative `-5` to reduce instead of increase\n* It can be expression like x*2 where `x` is the current value\n\nExample 1:\n$objectIncrease[Mido;10]\n$objectIncrease[Rake;5]\n$objectGet\n\nOutput:\n{\"Mido\":10,\"Rake\":5}\n\nExample 2:\n$objectIncrease[Mido;10]\n$objectIncrease[Mido;x*2]\n$objectGet\n\nOutput:\n{\"Mido\":20}",
    "$OnTemplate": "Only useful for templates, not for public use",
    "$imageDraw": "Draw a loaded image on the current image;$imageDraw[image name;x;y;width;height]\n\nExample:\n$imageCreate[300;300] // Create Image Frame\n$imageLoadFromURL[avatar;$replaceText[$authorAvatar;webp;png]]\n$imageDraw[avatar;0;0;300;300]\n$image[$imageOutput]\n\nOutput:\n[image]",
    "$imageDrawBack": "Draw a loaded image behind the current image;$imageDrawBack[image name;x;y;width;height]\n\nExample:\n$imageCreate[300;300] // Create Image Frame\n$imageLoadFromURL[avatar;$replaceText[$authorAvatar;webp;png]]\n$imageFill[gray]\n$imageFill[transparent;100;100;100;100]\n$imageDrawBack[avatar;50;50;200;200]\n$image[$imageOutput]\n\nOutput:\n[image]",
    "$imageFill": "Fill image with specific color name;$imageFill[color;x;y;width;height]\n\nColors:\nAccept Color Hex or Common Color Names like gray, black\n\nExample 1:\n$imageCreate[300;300]\n$imageFill[gray]\n$image[$imageOutput]\nOutput:\n![](https://i.imgur.com/hZxygLJ.png)\n\nExample 2:\n$imageCreate[300;300]\n$imageFill[gray]\n$imageFill[red;100;100;50;50]\n$image[$imageOutput]\nOutput:\n![](https://i.imgur.com/i9pAUZo.png)",
    "$imageWidth": "Return the image width, based on the name;$imageWidth[image name]\n\nExample 1:\n$imageWidth // return the current image width\n\nExample 2:\n$imageWidth[avatar] // return width of image that was loaded with avatar name",
    "$imageHeight": "Return the image height, based on the name;$imageHeight[image name]\n\nExample 1:\n$imageHeight // return the current image height\n\nExample 2:\n$imageHeight[avatar] // return height of image that was loaded with avatar name",
    "$imageLoadFromURL": "Load an image and save it with reference name, that can be used in other functions;$imageLoadFromURL[name;URL]\n\nExample:\n$imageCreate[300;300] // Create Image Frame\n$imageLoadFromURL[avatar;$replaceText[$authorAvatar;webp;png]]\n$imageDraw[avatar;0;0;300;300]\n$image[$imageOutput]\n\nOutput:\n[image]",
    "$imageOutput": "Generate the current draw into file, and return the filename, it can be used inside $image or {image:...} and other places that accept image;$imageOutput[type]\n\nTypes:\naccepted type is `png` or `jpg`\n\nExample 1:\n$imageCreate[..]\n// Building the image\n$image[$imageOutput] // send the image\n\nExample 2:\n$imageCreate[..]\n// Building the image\n$sendMessage[{image:$imageOutput[png]}] // send the image",
    "$imageCreate": "Create an empty image with specific size;$imageCreate[width;height]\n\nExample:\n$imageCreate[300;300]\n$imageFill[red]\n$image[$imageOutput]\n\nOutput:\n[image]",
    "$imageBorderRad": "Control the border radius of the filled box with $imageFill;$imageBorderRad[border radius]\n\nExample: (Draw Red Circle in the center)\n$imageCreate[300;300]\n$imageBorderRad[50]\n$imageFill[red;100;100;100;100]\n$image[$imageOutput]\n\nOutput:\n[image]",
    "$imageUseFont": "set font type for text written on the images;$imageUseFont[font name]\n\n## Accepted Font Names:\nDejaVu Serif, DejaVu Sans Mono, DejaVu Sans, Courier Prime, Lato, Montserrat, Open Sans, PT Mono, Quicksand, Raleway, Roboto, Roboto Mono, Rubik, Space Mono\n\n## Fonts Preview:\nhttps://i.imgur.com/FlkK6tx.png\n\nExample:\n$imageCreate[300;300]\n$imageUseFont[Roboto]\n$imageTextColor[white]\n$imageTextSize[30]\n$imageTextFill[Hello World;20;50]\n$stop[{image:$imageOutput}]\n\nOutput:\nhttps://i.imgur.com/RcvQDM7.png",
    "$imageTextFillColor": "specify the filling text color;$imageTextFillColor[Color name]",
    "$imageTextColor": "specify the filling & stroke text color;$imageTextColor[Color name]",
    "$imageTextFill": "write a filled text on an image;$imageTextFill[Text;position x;position y]",
    "$imageTextStrokeColor": "specify the stroke text color;$imageTextStrokeColor[Color name]",
    "$imageTextSize": "specify the text's font size;$imageTextSize[font size]",
    "$imageTextStroke": "write a stroke (border) text on an image;$imageTextStroke[Text;position x;position y]",
    "$imageTextWeight": "specify the weight of font, i.e bold, italic..;$imageTextWeight[Weight Type]\n\n# Types\nregular, bold, italic, bold italic\n or `<100/200/400/500/600/700/900>`",
    "$imageTextAlign": "specify the alignment of the text, effects the meaning of pos x and pos y for writing text positions;$imageTextAlign[Alignment]\n\n# Alignments\nleft, center, right",
    "$httpRequest": "Perform an http request, with a content and headers and return the response content;$httpRequest[URL;Method;Content;Header 1;Header 2;...]\n\nMethods:\nAccepts PUT, GET, POST, DELETE, HEAD, PATCH methods, if not provided, it will use GET method\n\nContent Input:\nIt can any content that suitable for your `content-type` header, like with `content-type: application/json` you can put the content as json format and so on\n\nHeader:\nIt accept the header in format of header: value\nfor example: `Content-Type: application/json`\n\nExample (Sending JSON Request):\n$let[response;$httpRequest[My API URL;post;{\"name\":\"Mido\"};Content-Type: application/json]]\nResponse is $response\nResponse Status is $httpRequestStatus\n\nOutput:\nResponse is {\"success\":true}\nResponse Status is 200\n\nSome Notes:\n* This function wont throw error if request non-ok status, so please check on your own the return value of $httpRequestStatus after the request to make sure its valid status you expecting\n* Make sure the response data length is less than 1 MB, or it will error",
    "$httpRequestHeader": "return the header values from the most recent request performed with $httpRequest;$httpRequestHeader[header name]\n\nExample:\n$let[response;$httpRequest[My API URL]]\nResponse Content type is $httpRequestHeader[content-type]\n\nOutput:\nResponse Content type is application/json",
    "$httpRequestStatus": "return the request status from the most recent request performed with $httpRequest;$httpRequestStatus\n\nExample:\n$let[response;$httpRequest[My API URL]]\nRequest status is $httpRequestStatus\n\nOutput:\nRequest Status is 200\n\nNote:\nIts recommended to check the request status directly after $httpRequest, to check if it was valid status.",
    "$ObjectMerge": "Merge the current object with another object, it overwrites the conflicted keys;$ObjectMerge[object]\n\nExample:\n$objectSet[name;Mido]\n$objectMerge[{\"country\":\"EG\"}]\n$objectGet\n\nOutput:\n{\"name\":\"Mido\", \"country\":\"EG\"}",
    "$addMenu": "Add a menu to existing message;$addMenu[\n        {channel=channel id}\n        {message=message id}\n        {id=Menu ID}\n        {ph=Placeholder}\n        \n        {label=Option 1 Label}\n        {desc=Option 1 Description}\n        {value=Option 1 ID}\n        {emoji=Option 1 Emoji}\n\n        {label=Option 2 Label}\n        {desc=Option 2 Description}\n        {value=Option 2 ID}\n        {emoji=Option 2 Emoji}\n        ...\n    ]\n\nExample:\n$addMenu[\n        {chid=$channelID}\n        {mid=1151607052007907449}\n        {id=mymenu}\n        {label=Rake}\n        {value=rake}\n        \n        {label=Mido}\n        {value=mido}]",
    "$displayName": "get the display name of a user;$displayName[User ID]\n\nExample:\n$displayName[788361834360864808]\n\nOutput:\nMido",
    "$arrayConcat": "Merge new array with the current array;$arrayConcat[List;separator;array name (optional)]\n\nExample:\n$arrayCreate[Mido/Rake;/]\n$arrayConcat[Azz/Finkz;/]\n$arrayJoin[, ]\n\nOutput:\nMido, Rake, Azz, Finkz\n\nNote on Separator:\nYou can use regex as separator i.e `/separator/`",
    "$blackListChannelIDs": "Blacklist channel/category/threads, and stop the execution with sending error message;$blackListChannelIDs[Channel 1;Channel 2;...;Error Message]\n\nExample:\n$blackListChannelIDs[Games;Help;You cant use this command inside Games or Help Channel.]"
}